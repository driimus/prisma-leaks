
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.8.1
 * Query Engine version: 34df67547cf5598f5a6cd3eb45f14ee70c3fb86f
 */
Prisma.prismaVersion = {
  client: "3.8.1",
  engine: "34df67547cf5598f5a6cd3eb45f14ee70c3fb86f"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.Abuse_reportsScalarFieldEnum = makeEnum({
  id: 'id',
  reporter_id: 'reporter_id',
  user_id: 'user_id',
  message: 'message',
  created_at: 'created_at',
  updated_at: 'updated_at',
  message_html: 'message_html',
  cached_markdown_version: 'cached_markdown_version'
});

exports.Prisma.AppearancesScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  description: 'description',
  header_logo: 'header_logo',
  logo: 'logo',
  created_at: 'created_at',
  updated_at: 'updated_at',
  description_html: 'description_html',
  cached_markdown_version: 'cached_markdown_version',
  new_project_guidelines: 'new_project_guidelines',
  new_project_guidelines_html: 'new_project_guidelines_html',
  header_message: 'header_message',
  header_message_html: 'header_message_html',
  footer_message: 'footer_message',
  footer_message_html: 'footer_message_html',
  message_background_color: 'message_background_color',
  message_font_color: 'message_font_color',
  favicon: 'favicon',
  email_header_and_footer_enabled: 'email_header_and_footer_enabled'
});

exports.Prisma.Application_setting_termsScalarFieldEnum = makeEnum({
  id: 'id',
  cached_markdown_version: 'cached_markdown_version',
  terms: 'terms',
  terms_html: 'terms_html'
});

exports.Prisma.Application_settingsScalarFieldEnum = makeEnum({
  id: 'id',
  default_projects_limit: 'default_projects_limit',
  signup_enabled: 'signup_enabled',
  gravatar_enabled: 'gravatar_enabled',
  sign_in_text: 'sign_in_text',
  created_at: 'created_at',
  updated_at: 'updated_at',
  home_page_url: 'home_page_url',
  default_branch_protection: 'default_branch_protection',
  restricted_visibility_levels: 'restricted_visibility_levels',
  version_check_enabled: 'version_check_enabled',
  max_attachment_size: 'max_attachment_size',
  default_project_visibility: 'default_project_visibility',
  default_snippet_visibility: 'default_snippet_visibility',
  domain_whitelist: 'domain_whitelist',
  user_oauth_applications: 'user_oauth_applications',
  after_sign_out_path: 'after_sign_out_path',
  session_expire_delay: 'session_expire_delay',
  import_sources: 'import_sources',
  help_page_text: 'help_page_text',
  admin_notification_email: 'admin_notification_email',
  shared_runners_enabled: 'shared_runners_enabled',
  max_artifacts_size: 'max_artifacts_size',
  runners_registration_token: 'runners_registration_token',
  max_pages_size: 'max_pages_size',
  require_two_factor_authentication: 'require_two_factor_authentication',
  two_factor_grace_period: 'two_factor_grace_period',
  metrics_enabled: 'metrics_enabled',
  metrics_host: 'metrics_host',
  metrics_pool_size: 'metrics_pool_size',
  metrics_timeout: 'metrics_timeout',
  metrics_method_call_threshold: 'metrics_method_call_threshold',
  recaptcha_enabled: 'recaptcha_enabled',
  recaptcha_site_key: 'recaptcha_site_key',
  recaptcha_private_key: 'recaptcha_private_key',
  metrics_port: 'metrics_port',
  akismet_enabled: 'akismet_enabled',
  akismet_api_key: 'akismet_api_key',
  metrics_sample_interval: 'metrics_sample_interval',
  sentry_enabled: 'sentry_enabled',
  sentry_dsn: 'sentry_dsn',
  email_author_in_body: 'email_author_in_body',
  default_group_visibility: 'default_group_visibility',
  repository_checks_enabled: 'repository_checks_enabled',
  shared_runners_text: 'shared_runners_text',
  metrics_packet_size: 'metrics_packet_size',
  disabled_oauth_sign_in_sources: 'disabled_oauth_sign_in_sources',
  health_check_access_token: 'health_check_access_token',
  send_user_confirmation_email: 'send_user_confirmation_email',
  container_registry_token_expire_delay: 'container_registry_token_expire_delay',
  after_sign_up_text: 'after_sign_up_text',
  user_default_external: 'user_default_external',
  repository_storages: 'repository_storages',
  enabled_git_access_protocol: 'enabled_git_access_protocol',
  domain_blacklist_enabled: 'domain_blacklist_enabled',
  domain_blacklist: 'domain_blacklist',
  usage_ping_enabled: 'usage_ping_enabled',
  sign_in_text_html: 'sign_in_text_html',
  help_page_text_html: 'help_page_text_html',
  shared_runners_text_html: 'shared_runners_text_html',
  after_sign_up_text_html: 'after_sign_up_text_html',
  rsa_key_restriction: 'rsa_key_restriction',
  dsa_key_restriction: 'dsa_key_restriction',
  ecdsa_key_restriction: 'ecdsa_key_restriction',
  ed25519_key_restriction: 'ed25519_key_restriction',
  housekeeping_enabled: 'housekeeping_enabled',
  housekeeping_bitmaps_enabled: 'housekeeping_bitmaps_enabled',
  housekeeping_incremental_repack_period: 'housekeeping_incremental_repack_period',
  housekeeping_full_repack_period: 'housekeeping_full_repack_period',
  housekeeping_gc_period: 'housekeeping_gc_period',
  html_emails_enabled: 'html_emails_enabled',
  plantuml_url: 'plantuml_url',
  plantuml_enabled: 'plantuml_enabled',
  terminal_max_session_time: 'terminal_max_session_time',
  unique_ips_limit_per_user: 'unique_ips_limit_per_user',
  unique_ips_limit_time_window: 'unique_ips_limit_time_window',
  unique_ips_limit_enabled: 'unique_ips_limit_enabled',
  default_artifacts_expire_in: 'default_artifacts_expire_in',
  uuid: 'uuid',
  polling_interval_multiplier: 'polling_interval_multiplier',
  cached_markdown_version: 'cached_markdown_version',
  clientside_sentry_enabled: 'clientside_sentry_enabled',
  clientside_sentry_dsn: 'clientside_sentry_dsn',
  prometheus_metrics_enabled: 'prometheus_metrics_enabled',
  help_page_hide_commercial_content: 'help_page_hide_commercial_content',
  help_page_support_url: 'help_page_support_url',
  performance_bar_allowed_group_id: 'performance_bar_allowed_group_id',
  hashed_storage_enabled: 'hashed_storage_enabled',
  project_export_enabled: 'project_export_enabled',
  auto_devops_enabled: 'auto_devops_enabled',
  throttle_unauthenticated_enabled: 'throttle_unauthenticated_enabled',
  throttle_unauthenticated_requests_per_period: 'throttle_unauthenticated_requests_per_period',
  throttle_unauthenticated_period_in_seconds: 'throttle_unauthenticated_period_in_seconds',
  throttle_authenticated_api_enabled: 'throttle_authenticated_api_enabled',
  throttle_authenticated_api_requests_per_period: 'throttle_authenticated_api_requests_per_period',
  throttle_authenticated_api_period_in_seconds: 'throttle_authenticated_api_period_in_seconds',
  throttle_authenticated_web_enabled: 'throttle_authenticated_web_enabled',
  throttle_authenticated_web_requests_per_period: 'throttle_authenticated_web_requests_per_period',
  throttle_authenticated_web_period_in_seconds: 'throttle_authenticated_web_period_in_seconds',
  password_authentication_enabled_for_web: 'password_authentication_enabled_for_web',
  password_authentication_enabled_for_git: 'password_authentication_enabled_for_git',
  gitaly_timeout_default: 'gitaly_timeout_default',
  gitaly_timeout_medium: 'gitaly_timeout_medium',
  gitaly_timeout_fast: 'gitaly_timeout_fast',
  authorized_keys_enabled: 'authorized_keys_enabled',
  auto_devops_domain: 'auto_devops_domain',
  pages_domain_verification_enabled: 'pages_domain_verification_enabled',
  user_default_internal_regex: 'user_default_internal_regex',
  allow_local_requests_from_hooks_and_services: 'allow_local_requests_from_hooks_and_services',
  enforce_terms: 'enforce_terms',
  mirror_available: 'mirror_available',
  hide_third_party_offers: 'hide_third_party_offers',
  instance_statistics_visibility_private: 'instance_statistics_visibility_private',
  web_ide_clientside_preview_enabled: 'web_ide_clientside_preview_enabled',
  user_show_add_ssh_key_message: 'user_show_add_ssh_key_message',
  usage_stats_set_by_user_id: 'usage_stats_set_by_user_id',
  receive_max_input_size: 'receive_max_input_size',
  diff_max_patch_bytes: 'diff_max_patch_bytes',
  archive_builds_in_seconds: 'archive_builds_in_seconds',
  commit_email_hostname: 'commit_email_hostname',
  protected_ci_variables: 'protected_ci_variables',
  runners_registration_token_encrypted: 'runners_registration_token_encrypted',
  local_markdown_version: 'local_markdown_version',
  first_day_of_week: 'first_day_of_week',
  default_project_creation: 'default_project_creation',
  external_authorization_service_enabled: 'external_authorization_service_enabled',
  external_authorization_service_url: 'external_authorization_service_url',
  external_authorization_service_default_label: 'external_authorization_service_default_label',
  external_authorization_service_timeout: 'external_authorization_service_timeout',
  external_auth_client_cert: 'external_auth_client_cert',
  encrypted_external_auth_client_key: 'encrypted_external_auth_client_key',
  encrypted_external_auth_client_key_iv: 'encrypted_external_auth_client_key_iv',
  encrypted_external_auth_client_key_pass: 'encrypted_external_auth_client_key_pass',
  encrypted_external_auth_client_key_pass_iv: 'encrypted_external_auth_client_key_pass_iv',
  lets_encrypt_notification_email: 'lets_encrypt_notification_email',
  lets_encrypt_terms_of_service_accepted: 'lets_encrypt_terms_of_service_accepted',
  elasticsearch_shards: 'elasticsearch_shards',
  elasticsearch_replicas: 'elasticsearch_replicas',
  encrypted_lets_encrypt_private_key: 'encrypted_lets_encrypt_private_key',
  encrypted_lets_encrypt_private_key_iv: 'encrypted_lets_encrypt_private_key_iv',
  dns_rebinding_protection_enabled: 'dns_rebinding_protection_enabled',
  default_project_deletion_protection: 'default_project_deletion_protection'
});

exports.Prisma.Ar_internal_metadataScalarFieldEnum = makeEnum({
  key: 'key',
  value: 'value',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Audit_eventsScalarFieldEnum = makeEnum({
  id: 'id',
  author_id: 'author_id',
  type: 'type',
  entity_id: 'entity_id',
  entity_type: 'entity_type',
  details: 'details',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Award_emojiScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  user_id: 'user_id',
  awardable_id: 'awardable_id',
  awardable_type: 'awardable_type',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.BadgesScalarFieldEnum = makeEnum({
  id: 'id',
  link_url: 'link_url',
  image_url: 'image_url',
  project_id: 'project_id',
  group_id: 'group_id',
  type: 'type',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Board_group_recent_visitsScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id',
  board_id: 'board_id',
  group_id: 'group_id'
});

exports.Prisma.Board_project_recent_visitsScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id',
  project_id: 'project_id',
  board_id: 'board_id'
});

exports.Prisma.BoardsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  group_id: 'group_id'
});

exports.Prisma.Broadcast_messagesScalarFieldEnum = makeEnum({
  id: 'id',
  message: 'message',
  starts_at: 'starts_at',
  ends_at: 'ends_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  color: 'color',
  font: 'font',
  message_html: 'message_html',
  cached_markdown_version: 'cached_markdown_version'
});

exports.Prisma.Chat_namesScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  service_id: 'service_id',
  team_id: 'team_id',
  team_domain: 'team_domain',
  chat_id: 'chat_id',
  chat_name: 'chat_name',
  last_used_at: 'last_used_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Chat_teamsScalarFieldEnum = makeEnum({
  id: 'id',
  namespace_id: 'namespace_id',
  team_id: 'team_id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Ci_build_trace_chunksScalarFieldEnum = makeEnum({
  id: 'id',
  build_id: 'build_id',
  chunk_index: 'chunk_index',
  data_store: 'data_store',
  raw_data: 'raw_data'
});

exports.Prisma.Ci_build_trace_section_namesScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  name: 'name'
});

exports.Prisma.Ci_build_trace_sectionsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  date_start: 'date_start',
  date_end: 'date_end',
  byte_start: 'byte_start',
  byte_end: 'byte_end',
  build_id: 'build_id',
  section_name_id: 'section_name_id'
});

exports.Prisma.Ci_buildsScalarFieldEnum = makeEnum({
  id: 'id',
  status: 'status',
  finished_at: 'finished_at',
  trace: 'trace',
  created_at: 'created_at',
  updated_at: 'updated_at',
  started_at: 'started_at',
  runner_id: 'runner_id',
  coverage: 'coverage',
  commit_id: 'commit_id',
  commands: 'commands',
  name: 'name',
  options: 'options',
  allow_failure: 'allow_failure',
  stage: 'stage',
  trigger_request_id: 'trigger_request_id',
  stage_idx: 'stage_idx',
  tag: 'tag',
  ref: 'ref',
  user_id: 'user_id',
  type: 'type',
  target_url: 'target_url',
  description: 'description',
  artifacts_file: 'artifacts_file',
  project_id: 'project_id',
  artifacts_metadata: 'artifacts_metadata',
  erased_by_id: 'erased_by_id',
  erased_at: 'erased_at',
  artifacts_expire_at: 'artifacts_expire_at',
  environment: 'environment',
  artifacts_size: 'artifacts_size',
  when: 'when',
  yaml_variables: 'yaml_variables',
  queued_at: 'queued_at',
  token: 'token',
  lock_version: 'lock_version',
  coverage_regex: 'coverage_regex',
  auto_canceled_by_id: 'auto_canceled_by_id',
  retried: 'retried',
  stage_id: 'stage_id',
  artifacts_file_store: 'artifacts_file_store',
  artifacts_metadata_store: 'artifacts_metadata_store',
  protected: 'protected',
  failure_reason: 'failure_reason',
  scheduled_at: 'scheduled_at',
  token_encrypted: 'token_encrypted'
});

exports.Prisma.Ci_builds_metadataScalarFieldEnum = makeEnum({
  id: 'id',
  build_id: 'build_id',
  project_id: 'project_id',
  timeout: 'timeout',
  timeout_source: 'timeout_source',
  config_options: 'config_options',
  config_variables: 'config_variables'
});

exports.Prisma.Ci_builds_runner_sessionScalarFieldEnum = makeEnum({
  id: 'id',
  build_id: 'build_id',
  url: 'url',
  certificate: 'certificate',
  authorization: 'authorization'
});

exports.Prisma.Ci_group_variablesScalarFieldEnum = makeEnum({
  id: 'id',
  key: 'key',
  value: 'value',
  encrypted_value: 'encrypted_value',
  encrypted_value_salt: 'encrypted_value_salt',
  encrypted_value_iv: 'encrypted_value_iv',
  group_id: 'group_id',
  protected: 'protected',
  created_at: 'created_at',
  updated_at: 'updated_at',
  masked: 'masked',
  variable_type: 'variable_type'
});

exports.Prisma.Ci_job_artifactsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  job_id: 'job_id',
  file_type: 'file_type',
  file_store: 'file_store',
  size: 'size',
  created_at: 'created_at',
  updated_at: 'updated_at',
  expire_at: 'expire_at',
  file: 'file',
  file_sha256: 'file_sha256',
  file_format: 'file_format',
  file_location: 'file_location'
});

exports.Prisma.Ci_pipeline_chat_dataScalarFieldEnum = makeEnum({
  id: 'id',
  pipeline_id: 'pipeline_id',
  chat_name_id: 'chat_name_id',
  response_url: 'response_url'
});

exports.Prisma.Ci_pipeline_schedule_variablesScalarFieldEnum = makeEnum({
  id: 'id',
  key: 'key',
  value: 'value',
  encrypted_value: 'encrypted_value',
  encrypted_value_salt: 'encrypted_value_salt',
  encrypted_value_iv: 'encrypted_value_iv',
  pipeline_schedule_id: 'pipeline_schedule_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  variable_type: 'variable_type'
});

exports.Prisma.Ci_pipeline_schedulesScalarFieldEnum = makeEnum({
  id: 'id',
  description: 'description',
  ref: 'ref',
  cron: 'cron',
  cron_timezone: 'cron_timezone',
  next_run_at: 'next_run_at',
  project_id: 'project_id',
  owner_id: 'owner_id',
  active: 'active',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Ci_pipeline_variablesScalarFieldEnum = makeEnum({
  id: 'id',
  key: 'key',
  value: 'value',
  encrypted_value: 'encrypted_value',
  encrypted_value_salt: 'encrypted_value_salt',
  encrypted_value_iv: 'encrypted_value_iv',
  pipeline_id: 'pipeline_id',
  variable_type: 'variable_type'
});

exports.Prisma.Ci_pipelinesScalarFieldEnum = makeEnum({
  id: 'id',
  ref: 'ref',
  sha: 'sha',
  before_sha: 'before_sha',
  created_at: 'created_at',
  updated_at: 'updated_at',
  tag: 'tag',
  yaml_errors: 'yaml_errors',
  committed_at: 'committed_at',
  project_id: 'project_id',
  status: 'status',
  started_at: 'started_at',
  finished_at: 'finished_at',
  duration: 'duration',
  user_id: 'user_id',
  lock_version: 'lock_version',
  auto_canceled_by_id: 'auto_canceled_by_id',
  pipeline_schedule_id: 'pipeline_schedule_id',
  source: 'source',
  config_source: 'config_source',
  protected: 'protected',
  failure_reason: 'failure_reason',
  iid: 'iid',
  merge_request_id: 'merge_request_id',
  source_sha: 'source_sha',
  target_sha: 'target_sha'
});

exports.Prisma.Ci_runner_namespacesScalarFieldEnum = makeEnum({
  id: 'id',
  runner_id: 'runner_id',
  namespace_id: 'namespace_id'
});

exports.Prisma.Ci_runner_projectsScalarFieldEnum = makeEnum({
  id: 'id',
  runner_id: 'runner_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  project_id: 'project_id'
});

exports.Prisma.Ci_runnersScalarFieldEnum = makeEnum({
  id: 'id',
  token: 'token',
  created_at: 'created_at',
  updated_at: 'updated_at',
  description: 'description',
  contacted_at: 'contacted_at',
  active: 'active',
  is_shared: 'is_shared',
  name: 'name',
  version: 'version',
  revision: 'revision',
  platform: 'platform',
  architecture: 'architecture',
  run_untagged: 'run_untagged',
  locked: 'locked',
  access_level: 'access_level',
  ip_address: 'ip_address',
  maximum_timeout: 'maximum_timeout',
  runner_type: 'runner_type',
  token_encrypted: 'token_encrypted'
});

exports.Prisma.Ci_stagesScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  pipeline_id: 'pipeline_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name',
  status: 'status',
  lock_version: 'lock_version',
  position: 'position'
});

exports.Prisma.Ci_trigger_requestsScalarFieldEnum = makeEnum({
  id: 'id',
  trigger_id: 'trigger_id',
  variables: 'variables',
  created_at: 'created_at',
  updated_at: 'updated_at',
  commit_id: 'commit_id'
});

exports.Prisma.Ci_triggersScalarFieldEnum = makeEnum({
  id: 'id',
  token: 'token',
  created_at: 'created_at',
  updated_at: 'updated_at',
  project_id: 'project_id',
  owner_id: 'owner_id',
  description: 'description',
  ref: 'ref'
});

exports.Prisma.Ci_variablesScalarFieldEnum = makeEnum({
  id: 'id',
  key: 'key',
  value: 'value',
  encrypted_value: 'encrypted_value',
  encrypted_value_salt: 'encrypted_value_salt',
  encrypted_value_iv: 'encrypted_value_iv',
  project_id: 'project_id',
  protected: 'protected',
  environment_scope: 'environment_scope',
  masked: 'masked',
  variable_type: 'variable_type'
});

exports.Prisma.Cluster_groupsScalarFieldEnum = makeEnum({
  id: 'id',
  cluster_id: 'cluster_id',
  group_id: 'group_id'
});

exports.Prisma.Cluster_platforms_kubernetesScalarFieldEnum = makeEnum({
  id: 'id',
  cluster_id: 'cluster_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  api_url: 'api_url',
  ca_cert: 'ca_cert',
  namespace: 'namespace',
  username: 'username',
  encrypted_password: 'encrypted_password',
  encrypted_password_iv: 'encrypted_password_iv',
  encrypted_token: 'encrypted_token',
  encrypted_token_iv: 'encrypted_token_iv',
  authorization_type: 'authorization_type'
});

exports.Prisma.Cluster_projectsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  cluster_id: 'cluster_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Cluster_providers_gcpScalarFieldEnum = makeEnum({
  id: 'id',
  cluster_id: 'cluster_id',
  status: 'status',
  num_nodes: 'num_nodes',
  created_at: 'created_at',
  updated_at: 'updated_at',
  status_reason: 'status_reason',
  gcp_project_id: 'gcp_project_id',
  zone: 'zone',
  machine_type: 'machine_type',
  operation_id: 'operation_id',
  endpoint: 'endpoint',
  encrypted_access_token: 'encrypted_access_token',
  encrypted_access_token_iv: 'encrypted_access_token_iv',
  legacy_abac: 'legacy_abac'
});

exports.Prisma.ClustersScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  provider_type: 'provider_type',
  platform_type: 'platform_type',
  created_at: 'created_at',
  updated_at: 'updated_at',
  enabled: 'enabled',
  name: 'name',
  environment_scope: 'environment_scope',
  cluster_type: 'cluster_type',
  domain: 'domain',
  managed: 'managed'
});

exports.Prisma.Clusters_applications_cert_managersScalarFieldEnum = makeEnum({
  id: 'id',
  cluster_id: 'cluster_id',
  status: 'status',
  version: 'version',
  email: 'email',
  created_at: 'created_at',
  updated_at: 'updated_at',
  status_reason: 'status_reason'
});

exports.Prisma.Clusters_applications_helmScalarFieldEnum = makeEnum({
  id: 'id',
  cluster_id: 'cluster_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  status: 'status',
  version: 'version',
  status_reason: 'status_reason',
  encrypted_ca_key: 'encrypted_ca_key',
  encrypted_ca_key_iv: 'encrypted_ca_key_iv',
  ca_cert: 'ca_cert'
});

exports.Prisma.Clusters_applications_ingressScalarFieldEnum = makeEnum({
  id: 'id',
  cluster_id: 'cluster_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  status: 'status',
  ingress_type: 'ingress_type',
  version: 'version',
  cluster_ip: 'cluster_ip',
  status_reason: 'status_reason',
  external_ip: 'external_ip',
  external_hostname: 'external_hostname'
});

exports.Prisma.Clusters_applications_jupyterScalarFieldEnum = makeEnum({
  id: 'id',
  cluster_id: 'cluster_id',
  oauth_application_id: 'oauth_application_id',
  status: 'status',
  version: 'version',
  hostname: 'hostname',
  created_at: 'created_at',
  updated_at: 'updated_at',
  status_reason: 'status_reason'
});

exports.Prisma.Clusters_applications_knativeScalarFieldEnum = makeEnum({
  id: 'id',
  cluster_id: 'cluster_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  status: 'status',
  version: 'version',
  hostname: 'hostname',
  status_reason: 'status_reason',
  external_ip: 'external_ip',
  external_hostname: 'external_hostname'
});

exports.Prisma.Clusters_applications_prometheusScalarFieldEnum = makeEnum({
  id: 'id',
  cluster_id: 'cluster_id',
  status: 'status',
  version: 'version',
  status_reason: 'status_reason',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Clusters_applications_runnersScalarFieldEnum = makeEnum({
  id: 'id',
  cluster_id: 'cluster_id',
  runner_id: 'runner_id',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  version: 'version',
  status_reason: 'status_reason',
  privileged: 'privileged'
});

exports.Prisma.Clusters_kubernetes_namespacesScalarFieldEnum = makeEnum({
  id: 'id',
  cluster_id: 'cluster_id',
  project_id: 'project_id',
  cluster_project_id: 'cluster_project_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  encrypted_service_account_token: 'encrypted_service_account_token',
  encrypted_service_account_token_iv: 'encrypted_service_account_token_iv',
  namespace: 'namespace',
  service_account_name: 'service_account_name'
});

exports.Prisma.Container_repositoriesScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Conversational_development_index_metricsScalarFieldEnum = makeEnum({
  id: 'id',
  leader_issues: 'leader_issues',
  instance_issues: 'instance_issues',
  leader_notes: 'leader_notes',
  instance_notes: 'instance_notes',
  leader_milestones: 'leader_milestones',
  instance_milestones: 'instance_milestones',
  leader_boards: 'leader_boards',
  instance_boards: 'instance_boards',
  leader_merge_requests: 'leader_merge_requests',
  instance_merge_requests: 'instance_merge_requests',
  leader_ci_pipelines: 'leader_ci_pipelines',
  instance_ci_pipelines: 'instance_ci_pipelines',
  leader_environments: 'leader_environments',
  instance_environments: 'instance_environments',
  leader_deployments: 'leader_deployments',
  instance_deployments: 'instance_deployments',
  leader_projects_prometheus_active: 'leader_projects_prometheus_active',
  instance_projects_prometheus_active: 'instance_projects_prometheus_active',
  leader_service_desk_issues: 'leader_service_desk_issues',
  instance_service_desk_issues: 'instance_service_desk_issues',
  created_at: 'created_at',
  updated_at: 'updated_at',
  percentage_boards: 'percentage_boards',
  percentage_ci_pipelines: 'percentage_ci_pipelines',
  percentage_deployments: 'percentage_deployments',
  percentage_environments: 'percentage_environments',
  percentage_issues: 'percentage_issues',
  percentage_merge_requests: 'percentage_merge_requests',
  percentage_milestones: 'percentage_milestones',
  percentage_notes: 'percentage_notes',
  percentage_projects_prometheus_active: 'percentage_projects_prometheus_active',
  percentage_service_desk_issues: 'percentage_service_desk_issues'
});

exports.Prisma.Deploy_keys_projectsScalarFieldEnum = makeEnum({
  id: 'id',
  deploy_key_id: 'deploy_key_id',
  project_id: 'project_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  can_push: 'can_push'
});

exports.Prisma.Deploy_tokensScalarFieldEnum = makeEnum({
  id: 'id',
  revoked: 'revoked',
  read_repository: 'read_repository',
  read_registry: 'read_registry',
  expires_at: 'expires_at',
  created_at: 'created_at',
  name: 'name',
  token: 'token'
});

exports.Prisma.DeploymentsScalarFieldEnum = makeEnum({
  id: 'id',
  iid: 'iid',
  project_id: 'project_id',
  environment_id: 'environment_id',
  ref: 'ref',
  tag: 'tag',
  sha: 'sha',
  user_id: 'user_id',
  deployable_id: 'deployable_id',
  deployable_type: 'deployable_type',
  created_at: 'created_at',
  updated_at: 'updated_at',
  on_stop: 'on_stop',
  status: 'status',
  finished_at: 'finished_at'
});

exports.Prisma.EmailsScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  email: 'email',
  created_at: 'created_at',
  updated_at: 'updated_at',
  confirmation_token: 'confirmation_token',
  confirmed_at: 'confirmed_at',
  confirmation_sent_at: 'confirmation_sent_at'
});

exports.Prisma.EnvironmentsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at',
  external_url: 'external_url',
  environment_type: 'environment_type',
  state: 'state',
  slug: 'slug'
});

exports.Prisma.EventsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  author_id: 'author_id',
  target_id: 'target_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  action: 'action',
  target_type: 'target_type'
});

exports.Prisma.Feature_gatesScalarFieldEnum = makeEnum({
  id: 'id',
  feature_key: 'feature_key',
  key: 'key',
  value: 'value',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.FeaturesScalarFieldEnum = makeEnum({
  id: 'id',
  key: 'key',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Fork_network_membersScalarFieldEnum = makeEnum({
  id: 'id',
  fork_network_id: 'fork_network_id',
  project_id: 'project_id',
  forked_from_project_id: 'forked_from_project_id'
});

exports.Prisma.Fork_networksScalarFieldEnum = makeEnum({
  id: 'id',
  root_project_id: 'root_project_id',
  deleted_root_project_name: 'deleted_root_project_name'
});

exports.Prisma.Forked_project_linksScalarFieldEnum = makeEnum({
  id: 'id',
  forked_to_project_id: 'forked_to_project_id',
  forked_from_project_id: 'forked_from_project_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Gpg_key_subkeysScalarFieldEnum = makeEnum({
  id: 'id',
  gpg_key_id: 'gpg_key_id',
  keyid: 'keyid',
  fingerprint: 'fingerprint'
});

exports.Prisma.Gpg_keysScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id',
  primary_keyid: 'primary_keyid',
  fingerprint: 'fingerprint',
  key: 'key'
});

exports.Prisma.Gpg_signaturesScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  project_id: 'project_id',
  gpg_key_id: 'gpg_key_id',
  commit_sha: 'commit_sha',
  gpg_key_primary_keyid: 'gpg_key_primary_keyid',
  gpg_key_user_name: 'gpg_key_user_name',
  gpg_key_user_email: 'gpg_key_user_email',
  verification_status: 'verification_status',
  gpg_key_subkey_id: 'gpg_key_subkey_id'
});

exports.Prisma.Group_custom_attributesScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  group_id: 'group_id',
  key: 'key',
  value: 'value'
});

exports.Prisma.IdentitiesScalarFieldEnum = makeEnum({
  id: 'id',
  extern_uid: 'extern_uid',
  provider: 'provider',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Import_export_uploadsScalarFieldEnum = makeEnum({
  id: 'id',
  updated_at: 'updated_at',
  project_id: 'project_id',
  import_file: 'import_file',
  export_file: 'export_file'
});

exports.Prisma.Internal_idsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  usage: 'usage',
  last_value: 'last_value',
  namespace_id: 'namespace_id'
});

exports.Prisma.Issue_assigneesScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  issue_id: 'issue_id'
});

exports.Prisma.Issue_metricsScalarFieldEnum = makeEnum({
  id: 'id',
  issue_id: 'issue_id',
  first_mentioned_in_commit_at: 'first_mentioned_in_commit_at',
  first_associated_with_milestone_at: 'first_associated_with_milestone_at',
  first_added_to_board_at: 'first_added_to_board_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.IssuesScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  author_id: 'author_id',
  project_id: 'project_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  description: 'description',
  milestone_id: 'milestone_id',
  state: 'state',
  iid: 'iid',
  updated_by_id: 'updated_by_id',
  confidential: 'confidential',
  due_date: 'due_date',
  moved_to_id: 'moved_to_id',
  lock_version: 'lock_version',
  title_html: 'title_html',
  description_html: 'description_html',
  time_estimate: 'time_estimate',
  relative_position: 'relative_position',
  cached_markdown_version: 'cached_markdown_version',
  last_edited_at: 'last_edited_at',
  last_edited_by_id: 'last_edited_by_id',
  discussion_locked: 'discussion_locked',
  closed_at: 'closed_at',
  closed_by_id: 'closed_by_id',
  state_id: 'state_id'
});

exports.Prisma.KeysScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  key: 'key',
  title: 'title',
  type: 'type',
  fingerprint: 'fingerprint',
  public: 'public',
  last_used_at: 'last_used_at'
});

exports.Prisma.Label_linksScalarFieldEnum = makeEnum({
  id: 'id',
  label_id: 'label_id',
  target_id: 'target_id',
  target_type: 'target_type',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Label_prioritiesScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  label_id: 'label_id',
  priority: 'priority',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.LabelsScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  color: 'color',
  project_id: 'project_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  template: 'template',
  description: 'description',
  description_html: 'description_html',
  type: 'type',
  group_id: 'group_id',
  cached_markdown_version: 'cached_markdown_version'
});

exports.Prisma.Lfs_file_locksScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  user_id: 'user_id',
  created_at: 'created_at',
  path: 'path'
});

exports.Prisma.Lfs_objectsScalarFieldEnum = makeEnum({
  id: 'id',
  oid: 'oid',
  size: 'size',
  created_at: 'created_at',
  updated_at: 'updated_at',
  file: 'file',
  file_store: 'file_store'
});

exports.Prisma.Lfs_objects_projectsScalarFieldEnum = makeEnum({
  id: 'id',
  lfs_object_id: 'lfs_object_id',
  project_id: 'project_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.ListsScalarFieldEnum = makeEnum({
  id: 'id',
  board_id: 'board_id',
  label_id: 'label_id',
  list_type: 'list_type',
  position: 'position',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.MembersScalarFieldEnum = makeEnum({
  id: 'id',
  access_level: 'access_level',
  source_id: 'source_id',
  source_type: 'source_type',
  user_id: 'user_id',
  notification_level: 'notification_level',
  type: 'type',
  created_at: 'created_at',
  updated_at: 'updated_at',
  created_by_id: 'created_by_id',
  invite_email: 'invite_email',
  invite_token: 'invite_token',
  invite_accepted_at: 'invite_accepted_at',
  requested_at: 'requested_at',
  expires_at: 'expires_at'
});

exports.Prisma.Merge_request_assigneesScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  merge_request_id: 'merge_request_id'
});

exports.Prisma.Merge_request_blocksScalarFieldEnum = makeEnum({
  id: 'id',
  blocking_merge_request_id: 'blocking_merge_request_id',
  blocked_merge_request_id: 'blocked_merge_request_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Merge_request_diff_commitsScalarFieldEnum = makeEnum({
  authored_date: 'authored_date',
  committed_date: 'committed_date',
  merge_request_diff_id: 'merge_request_diff_id',
  relative_order: 'relative_order',
  sha: 'sha',
  author_name: 'author_name',
  author_email: 'author_email',
  committer_name: 'committer_name',
  committer_email: 'committer_email',
  message: 'message'
});

exports.Prisma.Merge_request_diff_filesScalarFieldEnum = makeEnum({
  merge_request_diff_id: 'merge_request_diff_id',
  relative_order: 'relative_order',
  new_file: 'new_file',
  renamed_file: 'renamed_file',
  deleted_file: 'deleted_file',
  too_large: 'too_large',
  a_mode: 'a_mode',
  b_mode: 'b_mode',
  new_path: 'new_path',
  old_path: 'old_path',
  diff: 'diff',
  binary: 'binary',
  external_diff_offset: 'external_diff_offset',
  external_diff_size: 'external_diff_size'
});

exports.Prisma.Merge_request_diffsScalarFieldEnum = makeEnum({
  id: 'id',
  state: 'state',
  merge_request_id: 'merge_request_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  base_commit_sha: 'base_commit_sha',
  real_size: 'real_size',
  head_commit_sha: 'head_commit_sha',
  start_commit_sha: 'start_commit_sha',
  commits_count: 'commits_count',
  external_diff: 'external_diff',
  external_diff_store: 'external_diff_store',
  stored_externally: 'stored_externally'
});

exports.Prisma.Merge_request_metricsScalarFieldEnum = makeEnum({
  id: 'id',
  merge_request_id: 'merge_request_id',
  latest_build_started_at: 'latest_build_started_at',
  latest_build_finished_at: 'latest_build_finished_at',
  first_deployed_to_production_at: 'first_deployed_to_production_at',
  merged_at: 'merged_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  pipeline_id: 'pipeline_id',
  merged_by_id: 'merged_by_id',
  latest_closed_by_id: 'latest_closed_by_id',
  latest_closed_at: 'latest_closed_at'
});

exports.Prisma.Merge_requestsScalarFieldEnum = makeEnum({
  id: 'id',
  target_branch: 'target_branch',
  source_branch: 'source_branch',
  source_project_id: 'source_project_id',
  author_id: 'author_id',
  assignee_id: 'assignee_id',
  title: 'title',
  created_at: 'created_at',
  updated_at: 'updated_at',
  milestone_id: 'milestone_id',
  state: 'state',
  merge_status: 'merge_status',
  target_project_id: 'target_project_id',
  iid: 'iid',
  description: 'description',
  updated_by_id: 'updated_by_id',
  merge_error: 'merge_error',
  merge_params: 'merge_params',
  merge_when_pipeline_succeeds: 'merge_when_pipeline_succeeds',
  merge_user_id: 'merge_user_id',
  merge_commit_sha: 'merge_commit_sha',
  in_progress_merge_commit_sha: 'in_progress_merge_commit_sha',
  lock_version: 'lock_version',
  title_html: 'title_html',
  description_html: 'description_html',
  time_estimate: 'time_estimate',
  cached_markdown_version: 'cached_markdown_version',
  last_edited_at: 'last_edited_at',
  last_edited_by_id: 'last_edited_by_id',
  head_pipeline_id: 'head_pipeline_id',
  merge_jid: 'merge_jid',
  discussion_locked: 'discussion_locked',
  latest_merge_request_diff_id: 'latest_merge_request_diff_id',
  rebase_commit_sha: 'rebase_commit_sha',
  squash: 'squash',
  allow_maintainer_to_push: 'allow_maintainer_to_push',
  state_id: 'state_id'
});

exports.Prisma.Merge_requests_closing_issuesScalarFieldEnum = makeEnum({
  id: 'id',
  merge_request_id: 'merge_request_id',
  issue_id: 'issue_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Merge_trainsScalarFieldEnum = makeEnum({
  id: 'id',
  merge_request_id: 'merge_request_id',
  user_id: 'user_id',
  pipeline_id: 'pipeline_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  target_project_id: 'target_project_id',
  target_branch: 'target_branch'
});

exports.Prisma.MilestonesScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  project_id: 'project_id',
  description: 'description',
  due_date: 'due_date',
  created_at: 'created_at',
  updated_at: 'updated_at',
  state: 'state',
  iid: 'iid',
  title_html: 'title_html',
  description_html: 'description_html',
  start_date: 'start_date',
  cached_markdown_version: 'cached_markdown_version',
  group_id: 'group_id'
});

exports.Prisma.NamespacesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  path: 'path',
  owner_id: 'owner_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  type: 'type',
  description: 'description',
  avatar: 'avatar',
  share_with_group_lock: 'share_with_group_lock',
  visibility_level: 'visibility_level',
  request_access_enabled: 'request_access_enabled',
  description_html: 'description_html',
  lfs_enabled: 'lfs_enabled',
  parent_id: 'parent_id',
  require_two_factor_authentication: 'require_two_factor_authentication',
  two_factor_grace_period: 'two_factor_grace_period',
  cached_markdown_version: 'cached_markdown_version',
  runners_token: 'runners_token',
  runners_token_encrypted: 'runners_token_encrypted',
  project_creation_level: 'project_creation_level',
  auto_devops_enabled: 'auto_devops_enabled',
  last_ci_minutes_notification_at: 'last_ci_minutes_notification_at'
});

exports.Prisma.Note_diff_filesScalarFieldEnum = makeEnum({
  id: 'id',
  diff_note_id: 'diff_note_id',
  diff: 'diff',
  new_file: 'new_file',
  renamed_file: 'renamed_file',
  deleted_file: 'deleted_file',
  a_mode: 'a_mode',
  b_mode: 'b_mode',
  new_path: 'new_path',
  old_path: 'old_path'
});

exports.Prisma.NotesScalarFieldEnum = makeEnum({
  id: 'id',
  note: 'note',
  noteable_type: 'noteable_type',
  author_id: 'author_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  project_id: 'project_id',
  attachment: 'attachment',
  line_code: 'line_code',
  commit_id: 'commit_id',
  noteable_id: 'noteable_id',
  system: 'system',
  st_diff: 'st_diff',
  updated_by_id: 'updated_by_id',
  type: 'type',
  position: 'position',
  original_position: 'original_position',
  resolved_at: 'resolved_at',
  resolved_by_id: 'resolved_by_id',
  discussion_id: 'discussion_id',
  note_html: 'note_html',
  cached_markdown_version: 'cached_markdown_version',
  change_position: 'change_position',
  resolved_by_push: 'resolved_by_push'
});

exports.Prisma.Notification_settingsScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  source_id: 'source_id',
  source_type: 'source_type',
  level: 'level',
  created_at: 'created_at',
  updated_at: 'updated_at',
  new_note: 'new_note',
  new_issue: 'new_issue',
  reopen_issue: 'reopen_issue',
  close_issue: 'close_issue',
  reassign_issue: 'reassign_issue',
  new_merge_request: 'new_merge_request',
  reopen_merge_request: 'reopen_merge_request',
  close_merge_request: 'close_merge_request',
  reassign_merge_request: 'reassign_merge_request',
  merge_merge_request: 'merge_merge_request',
  failed_pipeline: 'failed_pipeline',
  success_pipeline: 'success_pipeline',
  push_to_merge_request: 'push_to_merge_request',
  issue_due: 'issue_due',
  notification_email: 'notification_email'
});

exports.Prisma.Oauth_access_grantsScalarFieldEnum = makeEnum({
  id: 'id',
  resource_owner_id: 'resource_owner_id',
  application_id: 'application_id',
  token: 'token',
  expires_in: 'expires_in',
  redirect_uri: 'redirect_uri',
  created_at: 'created_at',
  revoked_at: 'revoked_at',
  scopes: 'scopes'
});

exports.Prisma.Oauth_access_tokensScalarFieldEnum = makeEnum({
  id: 'id',
  resource_owner_id: 'resource_owner_id',
  application_id: 'application_id',
  token: 'token',
  refresh_token: 'refresh_token',
  expires_in: 'expires_in',
  revoked_at: 'revoked_at',
  created_at: 'created_at',
  scopes: 'scopes'
});

exports.Prisma.Oauth_applicationsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  uid: 'uid',
  secret: 'secret',
  redirect_uri: 'redirect_uri',
  scopes: 'scopes',
  created_at: 'created_at',
  updated_at: 'updated_at',
  owner_id: 'owner_id',
  owner_type: 'owner_type',
  trusted: 'trusted'
});

exports.Prisma.Oauth_openid_requestsScalarFieldEnum = makeEnum({
  id: 'id',
  access_grant_id: 'access_grant_id',
  nonce: 'nonce'
});

exports.Prisma.Pages_domain_acme_ordersScalarFieldEnum = makeEnum({
  id: 'id',
  pages_domain_id: 'pages_domain_id',
  expires_at: 'expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  url: 'url',
  challenge_token: 'challenge_token',
  challenge_file_content: 'challenge_file_content',
  encrypted_private_key: 'encrypted_private_key',
  encrypted_private_key_iv: 'encrypted_private_key_iv'
});

exports.Prisma.Pages_domainsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  certificate: 'certificate',
  encrypted_key: 'encrypted_key',
  encrypted_key_iv: 'encrypted_key_iv',
  encrypted_key_salt: 'encrypted_key_salt',
  domain: 'domain',
  verified_at: 'verified_at',
  verification_code: 'verification_code',
  enabled_until: 'enabled_until',
  remove_at: 'remove_at',
  auto_ssl_enabled: 'auto_ssl_enabled',
  certificate_valid_not_before: 'certificate_valid_not_before',
  certificate_valid_not_after: 'certificate_valid_not_after'
});

exports.Prisma.Personal_access_tokensScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  revoked: 'revoked',
  expires_at: 'expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  scopes: 'scopes',
  impersonation: 'impersonation',
  token_digest: 'token_digest'
});

exports.Prisma.Pool_repositoriesScalarFieldEnum = makeEnum({
  id: 'id',
  shard_id: 'shard_id',
  disk_path: 'disk_path',
  state: 'state',
  source_project_id: 'source_project_id'
});

exports.Prisma.Programming_languagesScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  color: 'color',
  created_at: 'created_at'
});

exports.Prisma.Project_authorizationsScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  project_id: 'project_id',
  access_level: 'access_level'
});

exports.Prisma.Project_auto_devopsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  enabled: 'enabled',
  deploy_strategy: 'deploy_strategy'
});

exports.Prisma.Project_ci_cd_settingsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  group_runners_enabled: 'group_runners_enabled',
  merge_pipelines_enabled: 'merge_pipelines_enabled',
  merge_trains_enabled: 'merge_trains_enabled',
  default_git_depth: 'default_git_depth'
});

exports.Prisma.Project_custom_attributesScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  project_id: 'project_id',
  key: 'key',
  value: 'value'
});

exports.Prisma.Project_daily_statisticsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  fetch_count: 'fetch_count',
  date: 'date'
});

exports.Prisma.Project_deploy_tokensScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  deploy_token_id: 'deploy_token_id',
  created_at: 'created_at'
});

exports.Prisma.Project_error_tracking_settingsScalarFieldEnum = makeEnum({
  project_id: 'project_id',
  enabled: 'enabled',
  api_url: 'api_url',
  encrypted_token: 'encrypted_token',
  encrypted_token_iv: 'encrypted_token_iv',
  project_name: 'project_name',
  organization_name: 'organization_name'
});

exports.Prisma.Project_featuresScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  merge_requests_access_level: 'merge_requests_access_level',
  issues_access_level: 'issues_access_level',
  wiki_access_level: 'wiki_access_level',
  snippets_access_level: 'snippets_access_level',
  builds_access_level: 'builds_access_level',
  created_at: 'created_at',
  updated_at: 'updated_at',
  repository_access_level: 'repository_access_level',
  pages_access_level: 'pages_access_level'
});

exports.Prisma.Project_group_linksScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  group_id: 'group_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  group_access: 'group_access',
  expires_at: 'expires_at'
});

exports.Prisma.Project_import_dataScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  data: 'data',
  encrypted_credentials: 'encrypted_credentials',
  encrypted_credentials_iv: 'encrypted_credentials_iv',
  encrypted_credentials_salt: 'encrypted_credentials_salt'
});

exports.Prisma.Project_metrics_settingsScalarFieldEnum = makeEnum({
  project_id: 'project_id',
  external_dashboard_url: 'external_dashboard_url'
});

exports.Prisma.Project_mirror_dataScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  status: 'status',
  jid: 'jid',
  last_error: 'last_error'
});

exports.Prisma.Project_repositoriesScalarFieldEnum = makeEnum({
  id: 'id',
  shard_id: 'shard_id',
  disk_path: 'disk_path',
  project_id: 'project_id'
});

exports.Prisma.Project_statisticsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  namespace_id: 'namespace_id',
  commit_count: 'commit_count',
  storage_size: 'storage_size',
  repository_size: 'repository_size',
  lfs_objects_size: 'lfs_objects_size',
  build_artifacts_size: 'build_artifacts_size',
  packages_size: 'packages_size',
  wiki_size: 'wiki_size'
});

exports.Prisma.ProjectsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  path: 'path',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at',
  creator_id: 'creator_id',
  namespace_id: 'namespace_id',
  last_activity_at: 'last_activity_at',
  import_url: 'import_url',
  visibility_level: 'visibility_level',
  archived: 'archived',
  avatar: 'avatar',
  import_status: 'import_status',
  star_count: 'star_count',
  import_type: 'import_type',
  import_source: 'import_source',
  import_error: 'import_error',
  shared_runners_enabled: 'shared_runners_enabled',
  runners_token: 'runners_token',
  build_coverage_regex: 'build_coverage_regex',
  build_allow_git_fetch: 'build_allow_git_fetch',
  build_timeout: 'build_timeout',
  pending_delete: 'pending_delete',
  public_builds: 'public_builds',
  last_repository_check_failed: 'last_repository_check_failed',
  last_repository_check_at: 'last_repository_check_at',
  container_registry_enabled: 'container_registry_enabled',
  only_allow_merge_if_pipeline_succeeds: 'only_allow_merge_if_pipeline_succeeds',
  has_external_issue_tracker: 'has_external_issue_tracker',
  repository_storage: 'repository_storage',
  request_access_enabled: 'request_access_enabled',
  has_external_wiki: 'has_external_wiki',
  ci_config_path: 'ci_config_path',
  lfs_enabled: 'lfs_enabled',
  description_html: 'description_html',
  only_allow_merge_if_all_discussions_are_resolved: 'only_allow_merge_if_all_discussions_are_resolved',
  printing_merge_request_link_enabled: 'printing_merge_request_link_enabled',
  auto_cancel_pending_pipelines: 'auto_cancel_pending_pipelines',
  import_jid: 'import_jid',
  cached_markdown_version: 'cached_markdown_version',
  delete_error: 'delete_error',
  last_repository_updated_at: 'last_repository_updated_at',
  storage_version: 'storage_version',
  resolve_outdated_diff_discussions: 'resolve_outdated_diff_discussions',
  repository_read_only: 'repository_read_only',
  merge_requests_ff_only_enabled: 'merge_requests_ff_only_enabled',
  merge_requests_rebase_enabled: 'merge_requests_rebase_enabled',
  jobs_cache_index: 'jobs_cache_index',
  pages_https_only: 'pages_https_only',
  remote_mirror_available_overridden: 'remote_mirror_available_overridden',
  pool_repository_id: 'pool_repository_id',
  runners_token_encrypted: 'runners_token_encrypted',
  bfg_object_map: 'bfg_object_map',
  detected_repository_languages: 'detected_repository_languages',
  external_authorization_classification_label: 'external_authorization_classification_label'
});

exports.Prisma.Prometheus_metricsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  title: 'title',
  query: 'query',
  y_label: 'y_label',
  unit: 'unit',
  legend: 'legend',
  group: 'group',
  created_at: 'created_at',
  updated_at: 'updated_at',
  common: 'common',
  identifier: 'identifier'
});

exports.Prisma.Protected_branch_merge_access_levelsScalarFieldEnum = makeEnum({
  id: 'id',
  protected_branch_id: 'protected_branch_id',
  access_level: 'access_level',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Protected_branch_push_access_levelsScalarFieldEnum = makeEnum({
  id: 'id',
  protected_branch_id: 'protected_branch_id',
  access_level: 'access_level',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Protected_branchesScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Protected_tag_create_access_levelsScalarFieldEnum = makeEnum({
  id: 'id',
  protected_tag_id: 'protected_tag_id',
  access_level: 'access_level',
  user_id: 'user_id',
  group_id: 'group_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Protected_tagsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Push_event_payloadsScalarFieldEnum = makeEnum({
  commit_count: 'commit_count',
  event_id: 'event_id',
  action: 'action',
  ref_type: 'ref_type',
  commit_from: 'commit_from',
  commit_to: 'commit_to',
  ref: 'ref',
  commit_title: 'commit_title'
});

exports.Prisma.Redirect_routesScalarFieldEnum = makeEnum({
  id: 'id',
  source_id: 'source_id',
  source_type: 'source_type',
  path: 'path',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Release_linksScalarFieldEnum = makeEnum({
  id: 'id',
  release_id: 'release_id',
  url: 'url',
  name: 'name',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.ReleasesScalarFieldEnum = makeEnum({
  id: 'id',
  tag: 'tag',
  description: 'description',
  project_id: 'project_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  description_html: 'description_html',
  cached_markdown_version: 'cached_markdown_version',
  author_id: 'author_id',
  name: 'name',
  sha: 'sha'
});

exports.Prisma.Remote_mirrorsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  url: 'url',
  enabled: 'enabled',
  update_status: 'update_status',
  last_update_at: 'last_update_at',
  last_successful_update_at: 'last_successful_update_at',
  last_update_started_at: 'last_update_started_at',
  last_error: 'last_error',
  only_protected_branches: 'only_protected_branches',
  remote_name: 'remote_name',
  encrypted_credentials: 'encrypted_credentials',
  encrypted_credentials_iv: 'encrypted_credentials_iv',
  encrypted_credentials_salt: 'encrypted_credentials_salt',
  created_at: 'created_at',
  updated_at: 'updated_at',
  error_notification_sent: 'error_notification_sent'
});

exports.Prisma.Repository_languagesScalarFieldEnum = makeEnum({
  project_id: 'project_id',
  programming_language_id: 'programming_language_id',
  share: 'share'
});

exports.Prisma.Resource_label_eventsScalarFieldEnum = makeEnum({
  id: 'id',
  action: 'action',
  issue_id: 'issue_id',
  merge_request_id: 'merge_request_id',
  label_id: 'label_id',
  user_id: 'user_id',
  created_at: 'created_at',
  cached_markdown_version: 'cached_markdown_version',
  reference: 'reference',
  reference_html: 'reference_html'
});

exports.Prisma.RoutesScalarFieldEnum = makeEnum({
  id: 'id',
  source_id: 'source_id',
  source_type: 'source_type',
  path: 'path',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name'
});

exports.Prisma.Schema_migrationsScalarFieldEnum = makeEnum({
  version: 'version'
});

exports.Prisma.Sent_notificationsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  noteable_id: 'noteable_id',
  noteable_type: 'noteable_type',
  recipient_id: 'recipient_id',
  commit_id: 'commit_id',
  reply_key: 'reply_key',
  line_code: 'line_code',
  note_type: 'note_type',
  position: 'position',
  in_reply_to_discussion_id: 'in_reply_to_discussion_id'
});

exports.Prisma.ServicesScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  title: 'title',
  project_id: 'project_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  active: 'active',
  properties: 'properties',
  template: 'template',
  push_events: 'push_events',
  issues_events: 'issues_events',
  merge_requests_events: 'merge_requests_events',
  tag_push_events: 'tag_push_events',
  note_events: 'note_events',
  category: 'category',
  default: 'default',
  wiki_page_events: 'wiki_page_events',
  pipeline_events: 'pipeline_events',
  confidential_issues_events: 'confidential_issues_events',
  commit_events: 'commit_events',
  job_events: 'job_events',
  confidential_note_events: 'confidential_note_events',
  deployment_events: 'deployment_events'
});

exports.Prisma.ShardsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.SnippetsScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  content: 'content',
  author_id: 'author_id',
  project_id: 'project_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  file_name: 'file_name',
  type: 'type',
  visibility_level: 'visibility_level',
  title_html: 'title_html',
  content_html: 'content_html',
  cached_markdown_version: 'cached_markdown_version',
  description: 'description',
  description_html: 'description_html'
});

exports.Prisma.Spam_logsScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  source_ip: 'source_ip',
  user_agent: 'user_agent',
  via_api: 'via_api',
  noteable_type: 'noteable_type',
  title: 'title',
  description: 'description',
  created_at: 'created_at',
  updated_at: 'updated_at',
  submitted_as_ham: 'submitted_as_ham',
  recaptcha_verified: 'recaptcha_verified'
});

exports.Prisma.SubscriptionsScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  subscribable_id: 'subscribable_id',
  subscribable_type: 'subscribable_type',
  subscribed: 'subscribed',
  created_at: 'created_at',
  updated_at: 'updated_at',
  project_id: 'project_id'
});

exports.Prisma.SuggestionsScalarFieldEnum = makeEnum({
  id: 'id',
  note_id: 'note_id',
  relative_order: 'relative_order',
  applied: 'applied',
  commit_id: 'commit_id',
  from_content: 'from_content',
  to_content: 'to_content',
  lines_above: 'lines_above',
  lines_below: 'lines_below',
  outdated: 'outdated'
});

exports.Prisma.System_note_metadataScalarFieldEnum = makeEnum({
  id: 'id',
  note_id: 'note_id',
  commit_count: 'commit_count',
  action: 'action',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.TaggingsScalarFieldEnum = makeEnum({
  id: 'id',
  tag_id: 'tag_id',
  taggable_id: 'taggable_id',
  taggable_type: 'taggable_type',
  tagger_id: 'tagger_id',
  tagger_type: 'tagger_type',
  context: 'context',
  created_at: 'created_at'
});

exports.Prisma.TagsScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  taggings_count: 'taggings_count'
});

exports.Prisma.Term_agreementsScalarFieldEnum = makeEnum({
  id: 'id',
  term_id: 'term_id',
  user_id: 'user_id',
  accepted: 'accepted',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.TimelogsScalarFieldEnum = makeEnum({
  id: 'id',
  time_spent: 'time_spent',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  issue_id: 'issue_id',
  merge_request_id: 'merge_request_id',
  spent_at: 'spent_at'
});

exports.Prisma.TodosScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  project_id: 'project_id',
  target_id: 'target_id',
  target_type: 'target_type',
  author_id: 'author_id',
  action: 'action',
  state: 'state',
  created_at: 'created_at',
  updated_at: 'updated_at',
  note_id: 'note_id',
  commit_id: 'commit_id',
  group_id: 'group_id'
});

exports.Prisma.Trending_projectsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id'
});

exports.Prisma.U2f_registrationsScalarFieldEnum = makeEnum({
  id: 'id',
  certificate: 'certificate',
  key_handle: 'key_handle',
  public_key: 'public_key',
  counter: 'counter',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name'
});

exports.Prisma.UploadsScalarFieldEnum = makeEnum({
  id: 'id',
  size: 'size',
  path: 'path',
  checksum: 'checksum',
  model_id: 'model_id',
  model_type: 'model_type',
  uploader: 'uploader',
  created_at: 'created_at',
  mount_point: 'mount_point',
  secret: 'secret',
  store: 'store'
});

exports.Prisma.User_agent_detailsScalarFieldEnum = makeEnum({
  id: 'id',
  user_agent: 'user_agent',
  ip_address: 'ip_address',
  subject_id: 'subject_id',
  subject_type: 'subject_type',
  submitted: 'submitted',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.User_calloutsScalarFieldEnum = makeEnum({
  id: 'id',
  feature_name: 'feature_name',
  user_id: 'user_id'
});

exports.Prisma.User_custom_attributesScalarFieldEnum = makeEnum({
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id',
  key: 'key',
  value: 'value'
});

exports.Prisma.User_interacted_projectsScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  project_id: 'project_id'
});

exports.Prisma.User_preferencesScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  issue_notes_filter: 'issue_notes_filter',
  merge_request_notes_filter: 'merge_request_notes_filter',
  created_at: 'created_at',
  updated_at: 'updated_at',
  first_day_of_week: 'first_day_of_week',
  issues_sort: 'issues_sort',
  merge_requests_sort: 'merge_requests_sort',
  timezone: 'timezone',
  time_display_relative: 'time_display_relative',
  time_format_in_24h: 'time_format_in_24h'
});

exports.Prisma.User_statusesScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  cached_markdown_version: 'cached_markdown_version',
  emoji: 'emoji',
  message: 'message',
  message_html: 'message_html'
});

exports.Prisma.User_synced_attributes_metadataScalarFieldEnum = makeEnum({
  id: 'id',
  name_synced: 'name_synced',
  email_synced: 'email_synced',
  location_synced: 'location_synced',
  user_id: 'user_id',
  provider: 'provider'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  encrypted_password: 'encrypted_password',
  reset_password_token: 'reset_password_token',
  reset_password_sent_at: 'reset_password_sent_at',
  remember_created_at: 'remember_created_at',
  sign_in_count: 'sign_in_count',
  current_sign_in_at: 'current_sign_in_at',
  last_sign_in_at: 'last_sign_in_at',
  current_sign_in_ip: 'current_sign_in_ip',
  last_sign_in_ip: 'last_sign_in_ip',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name',
  admin: 'admin',
  projects_limit: 'projects_limit',
  skype: 'skype',
  linkedin: 'linkedin',
  twitter: 'twitter',
  bio: 'bio',
  failed_attempts: 'failed_attempts',
  locked_at: 'locked_at',
  username: 'username',
  can_create_group: 'can_create_group',
  can_create_team: 'can_create_team',
  state: 'state',
  color_scheme_id: 'color_scheme_id',
  password_expires_at: 'password_expires_at',
  created_by_id: 'created_by_id',
  last_credential_check_at: 'last_credential_check_at',
  avatar: 'avatar',
  confirmation_token: 'confirmation_token',
  confirmed_at: 'confirmed_at',
  confirmation_sent_at: 'confirmation_sent_at',
  unconfirmed_email: 'unconfirmed_email',
  hide_no_ssh_key: 'hide_no_ssh_key',
  website_url: 'website_url',
  notification_email: 'notification_email',
  hide_no_password: 'hide_no_password',
  password_automatically_set: 'password_automatically_set',
  location: 'location',
  encrypted_otp_secret: 'encrypted_otp_secret',
  encrypted_otp_secret_iv: 'encrypted_otp_secret_iv',
  encrypted_otp_secret_salt: 'encrypted_otp_secret_salt',
  otp_required_for_login: 'otp_required_for_login',
  otp_backup_codes: 'otp_backup_codes',
  public_email: 'public_email',
  dashboard: 'dashboard',
  project_view: 'project_view',
  consumed_timestep: 'consumed_timestep',
  layout: 'layout',
  hide_project_limit: 'hide_project_limit',
  unlock_token: 'unlock_token',
  otp_grace_period_started_at: 'otp_grace_period_started_at',
  external: 'external',
  incoming_email_token: 'incoming_email_token',
  organization: 'organization',
  require_two_factor_authentication_from_group: 'require_two_factor_authentication_from_group',
  two_factor_grace_period: 'two_factor_grace_period',
  ghost: 'ghost',
  last_activity_on: 'last_activity_on',
  notified_of_own_activity: 'notified_of_own_activity',
  preferred_language: 'preferred_language',
  theme_id: 'theme_id',
  accepted_term_id: 'accepted_term_id',
  feed_token: 'feed_token',
  private_profile: 'private_profile',
  include_private_contributions: 'include_private_contributions',
  commit_email: 'commit_email'
});

exports.Prisma.Users_star_projectsScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  user_id: 'user_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Web_hook_logsScalarFieldEnum = makeEnum({
  id: 'id',
  web_hook_id: 'web_hook_id',
  trigger: 'trigger',
  url: 'url',
  request_headers: 'request_headers',
  request_data: 'request_data',
  response_headers: 'response_headers',
  response_body: 'response_body',
  response_status: 'response_status',
  execution_duration: 'execution_duration',
  internal_error_message: 'internal_error_message',
  created_at: 'created_at',
  updated_at: 'updated_at'
});

exports.Prisma.Web_hooksScalarFieldEnum = makeEnum({
  id: 'id',
  project_id: 'project_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  type: 'type',
  service_id: 'service_id',
  push_events: 'push_events',
  issues_events: 'issues_events',
  merge_requests_events: 'merge_requests_events',
  tag_push_events: 'tag_push_events',
  note_events: 'note_events',
  enable_ssl_verification: 'enable_ssl_verification',
  wiki_page_events: 'wiki_page_events',
  pipeline_events: 'pipeline_events',
  confidential_issues_events: 'confidential_issues_events',
  repository_update_events: 'repository_update_events',
  job_events: 'job_events',
  confidential_note_events: 'confidential_note_events',
  push_events_branch_filter: 'push_events_branch_filter',
  encrypted_token: 'encrypted_token',
  encrypted_token_iv: 'encrypted_token_iv',
  encrypted_url: 'encrypted_url',
  encrypted_url_iv: 'encrypted_url_iv'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.NullableJsonNullValueInput = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});

exports.Prisma.JsonNullValueFilter = makeEnum({
  DbNull: 'DbNull',
  JsonNull: 'JsonNull',
  AnyNull: 'AnyNull'
});


exports.Prisma.ModelName = makeEnum({
  abuse_reports: 'abuse_reports',
  appearances: 'appearances',
  application_setting_terms: 'application_setting_terms',
  application_settings: 'application_settings',
  ar_internal_metadata: 'ar_internal_metadata',
  audit_events: 'audit_events',
  award_emoji: 'award_emoji',
  badges: 'badges',
  board_group_recent_visits: 'board_group_recent_visits',
  board_project_recent_visits: 'board_project_recent_visits',
  boards: 'boards',
  broadcast_messages: 'broadcast_messages',
  chat_names: 'chat_names',
  chat_teams: 'chat_teams',
  ci_build_trace_chunks: 'ci_build_trace_chunks',
  ci_build_trace_section_names: 'ci_build_trace_section_names',
  ci_build_trace_sections: 'ci_build_trace_sections',
  ci_builds: 'ci_builds',
  ci_builds_metadata: 'ci_builds_metadata',
  ci_builds_runner_session: 'ci_builds_runner_session',
  ci_group_variables: 'ci_group_variables',
  ci_job_artifacts: 'ci_job_artifacts',
  ci_pipeline_chat_data: 'ci_pipeline_chat_data',
  ci_pipeline_schedule_variables: 'ci_pipeline_schedule_variables',
  ci_pipeline_schedules: 'ci_pipeline_schedules',
  ci_pipeline_variables: 'ci_pipeline_variables',
  ci_pipelines: 'ci_pipelines',
  ci_runner_namespaces: 'ci_runner_namespaces',
  ci_runner_projects: 'ci_runner_projects',
  ci_runners: 'ci_runners',
  ci_stages: 'ci_stages',
  ci_trigger_requests: 'ci_trigger_requests',
  ci_triggers: 'ci_triggers',
  ci_variables: 'ci_variables',
  cluster_groups: 'cluster_groups',
  cluster_platforms_kubernetes: 'cluster_platforms_kubernetes',
  cluster_projects: 'cluster_projects',
  cluster_providers_gcp: 'cluster_providers_gcp',
  clusters: 'clusters',
  clusters_applications_cert_managers: 'clusters_applications_cert_managers',
  clusters_applications_helm: 'clusters_applications_helm',
  clusters_applications_ingress: 'clusters_applications_ingress',
  clusters_applications_jupyter: 'clusters_applications_jupyter',
  clusters_applications_knative: 'clusters_applications_knative',
  clusters_applications_prometheus: 'clusters_applications_prometheus',
  clusters_applications_runners: 'clusters_applications_runners',
  clusters_kubernetes_namespaces: 'clusters_kubernetes_namespaces',
  container_repositories: 'container_repositories',
  conversational_development_index_metrics: 'conversational_development_index_metrics',
  deploy_keys_projects: 'deploy_keys_projects',
  deploy_tokens: 'deploy_tokens',
  deployments: 'deployments',
  emails: 'emails',
  environments: 'environments',
  events: 'events',
  feature_gates: 'feature_gates',
  features: 'features',
  fork_network_members: 'fork_network_members',
  fork_networks: 'fork_networks',
  forked_project_links: 'forked_project_links',
  gpg_key_subkeys: 'gpg_key_subkeys',
  gpg_keys: 'gpg_keys',
  gpg_signatures: 'gpg_signatures',
  group_custom_attributes: 'group_custom_attributes',
  identities: 'identities',
  import_export_uploads: 'import_export_uploads',
  internal_ids: 'internal_ids',
  issue_assignees: 'issue_assignees',
  issue_metrics: 'issue_metrics',
  issues: 'issues',
  keys: 'keys',
  label_links: 'label_links',
  label_priorities: 'label_priorities',
  labels: 'labels',
  lfs_file_locks: 'lfs_file_locks',
  lfs_objects: 'lfs_objects',
  lfs_objects_projects: 'lfs_objects_projects',
  lists: 'lists',
  members: 'members',
  merge_request_assignees: 'merge_request_assignees',
  merge_request_blocks: 'merge_request_blocks',
  merge_request_diff_commits: 'merge_request_diff_commits',
  merge_request_diff_files: 'merge_request_diff_files',
  merge_request_diffs: 'merge_request_diffs',
  merge_request_metrics: 'merge_request_metrics',
  merge_requests: 'merge_requests',
  merge_requests_closing_issues: 'merge_requests_closing_issues',
  merge_trains: 'merge_trains',
  milestones: 'milestones',
  namespaces: 'namespaces',
  note_diff_files: 'note_diff_files',
  notes: 'notes',
  notification_settings: 'notification_settings',
  oauth_access_grants: 'oauth_access_grants',
  oauth_access_tokens: 'oauth_access_tokens',
  oauth_applications: 'oauth_applications',
  oauth_openid_requests: 'oauth_openid_requests',
  pages_domain_acme_orders: 'pages_domain_acme_orders',
  pages_domains: 'pages_domains',
  personal_access_tokens: 'personal_access_tokens',
  pool_repositories: 'pool_repositories',
  programming_languages: 'programming_languages',
  project_authorizations: 'project_authorizations',
  project_auto_devops: 'project_auto_devops',
  project_ci_cd_settings: 'project_ci_cd_settings',
  project_custom_attributes: 'project_custom_attributes',
  project_daily_statistics: 'project_daily_statistics',
  project_deploy_tokens: 'project_deploy_tokens',
  project_error_tracking_settings: 'project_error_tracking_settings',
  project_features: 'project_features',
  project_group_links: 'project_group_links',
  project_import_data: 'project_import_data',
  project_metrics_settings: 'project_metrics_settings',
  project_mirror_data: 'project_mirror_data',
  project_repositories: 'project_repositories',
  project_statistics: 'project_statistics',
  projects: 'projects',
  prometheus_metrics: 'prometheus_metrics',
  protected_branch_merge_access_levels: 'protected_branch_merge_access_levels',
  protected_branch_push_access_levels: 'protected_branch_push_access_levels',
  protected_branches: 'protected_branches',
  protected_tag_create_access_levels: 'protected_tag_create_access_levels',
  protected_tags: 'protected_tags',
  push_event_payloads: 'push_event_payloads',
  redirect_routes: 'redirect_routes',
  release_links: 'release_links',
  releases: 'releases',
  remote_mirrors: 'remote_mirrors',
  repository_languages: 'repository_languages',
  resource_label_events: 'resource_label_events',
  routes: 'routes',
  schema_migrations: 'schema_migrations',
  sent_notifications: 'sent_notifications',
  services: 'services',
  shards: 'shards',
  snippets: 'snippets',
  spam_logs: 'spam_logs',
  subscriptions: 'subscriptions',
  suggestions: 'suggestions',
  system_note_metadata: 'system_note_metadata',
  taggings: 'taggings',
  tags: 'tags',
  term_agreements: 'term_agreements',
  timelogs: 'timelogs',
  todos: 'todos',
  trending_projects: 'trending_projects',
  u2f_registrations: 'u2f_registrations',
  uploads: 'uploads',
  user_agent_details: 'user_agent_details',
  user_callouts: 'user_callouts',
  user_custom_attributes: 'user_custom_attributes',
  user_interacted_projects: 'user_interacted_projects',
  user_preferences: 'user_preferences',
  user_statuses: 'user_statuses',
  user_synced_attributes_metadata: 'user_synced_attributes_metadata',
  users: 'users',
  users_star_projects: 'users_star_projects',
  web_hook_logs: 'web_hook_logs',
  web_hooks: 'web_hooks'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
